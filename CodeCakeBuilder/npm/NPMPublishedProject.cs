using Cake.Common.IO;
using Cake.Npm;
using Cake.Npm.Pack;
using CK.Text;
using CodeCake.Abstractions;
using CodeCakeBuilder.npm;
using Newtonsoft.Json.Linq;
using System;
using System.IO;

namespace CodeCake
{
    public class NPMPublishedProject : YarnWorkspace, ILocalArtifact
    {
        NPMPublishedProject( StandardGlobalInfo globalInfo, NodeSolution npmSolution, SimplePackageJsonFile json, NormalizedPath outputPath )
            : base( globalInfo, npmSolution, json, outputPath )
        {
            ArtifactInstance = new ArtifactInstance( new Artifact( "NPM", json.Name ), globalInfo.BuildInfo.Version );
            TGZName = NPMHelpers.GetPackageTarballFilename( json.Name, globalInfo.BuildInfo.Version );
        }

        /// <summary>
        /// Create a <see cref="YarnWorkspace"/> that can be a <see cref="NPMPublishedProject"/>.
        /// </summary>
        /// <param name="globalInfo">The global info of the CodeCakeBuilder.</param>
        /// <param name="dirPath">The directory path where is located the npm package.</param>
        /// <param name="outputPath">The directory path where the build output is. It can be the same than <paramref name="dirPath"/>.</param>
        /// <returns></returns>
        public static YarnWorkspace Create( StandardGlobalInfo globalInfo, NodeSolution solution, NormalizedPath dirPath, NormalizedPath outputPath )
        {
            var json = SimplePackageJsonFile.Create( globalInfo.Cake, dirPath );
            YarnWorkspace output;
            if( json.IsPrivate )
            {
                output = CreateYarnWorkspace( globalInfo, solution, json, outputPath );
            }
            else
            {
                output = new NPMPublishedProject( globalInfo, solution, json, outputPath );
            }
            return output;
        }

        public override bool IsPublished => true;

        public ArtifactInstance ArtifactInstance { get; }

        public string Name => ArtifactInstance.Artifact.Name;

        public string TGZName { get; }

        private protected override void DoRunScript( string scriptName, bool runInBuildDirectory )
        {
            using( TemporarySetPackageVersion( ArtifactInstance.Version ) )
            {
                base.DoRunScript( scriptName, runInBuildDirectory );
            }
        }

        /// <summary>
        /// Generates the .tgz file in the <see cref="StandardGlobalInfo.ReleasesFolder"/>
        /// by calling npm pack.
        /// </summary>
        /// <param name="globalInfo">The global information object.</param>
        /// <param name="cleanupPackageJson">
        /// By default, "scripts" and "devDependencies" are removed from the package.json file.
        /// </param>
        /// <param name="packageJsonPreProcessor">Optional package.json pre processor.</param>
        public void RunPack( Action<JObject> packageJsonPreProcessor = null )
        {
            var tgz = OutputPath.AppendPart( TGZName );
            using( TemporarySetPackageVersion( ArtifactInstance.Version, true ) )
            {
                using( TemporaryPrePack( GlobalInfo.Cake.Log, ArtifactInstance.Version, packageJsonPreProcessor ) )
                {
                    GlobalInfo.Cake.NpmPack( new NpmPackSettings()
                    {
                        LogLevel = NpmLogLevel.Info,
                        WorkingDirectory = OutputPath.ToString()
                    } );
                }
            }
            if( !File.Exists( tgz ) )
            {
                GlobalInfo.Cake.TerminateWithError( $"Package file '{tgz}' has not been generated by 'npm pack'." );
            }
            var target = GlobalInfo.ReleasesFolder.AppendPart( TGZName );
            GlobalInfo.Cake.CopyFile( tgz.Path, target.Path );
            GlobalInfo.Cake.DeleteFile( tgz.Path );
        }
    }
}
